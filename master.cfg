# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.steps.source.git import Git
from buildbot.steps.python import Sphinx
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import DirectoryUpload
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic  import SingleBranchScheduler
from buildbot.config import BuilderConfig
from buildbot.steps.master import MasterShellCommand
from buildbot.status.mail import MailNotifier
from buildbot.steps.shell import WithProperties

import bbconf

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

ngq_repourl = 'git@github.com:nextgis/NextGIS-QGIS.git'
ngq_branch_for_everyday = 'ngq-15_0'
ngq_src_dir_name = 'ngq_src'
docs_repourl = 'git://github.com/nextgis/docs_ng.git'
selfupdate_repourl = 'git://github.com/nextgis/buildbot.git'

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
    buildslave.BuildSlave("build-nix", bbconf.slave_passwd),
    buildslave.BuildSlave("build-win7", bbconf.slave_passwd)]

#TODO: add slaves Windows, MacOS, etc?

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 

ngq_git_poller = GitPoller(project = 'ngq',
                       repourl = ngq_repourl,
                       workdir = ngq_src_dir_name,
                       branch = 'ngq-15_0',
                       pollinterval = 3600,)

docs_git_poller = GitPoller(project = 'docs',
                       repourl = docs_repourl,
                       workdir = 'docs_ng-workdir',
                       branch = 'master',
                       pollinterval = 3600,)
                       
selfupdate_git_poller = GitPoller(project = 'selfupdate',
                       repourl = selfupdate_repourl,
                       workdir = 'selfupdate-workdir',
                       branch = 'master',
                       pollinterval = 600,)                       

c['change_source'] = [selfupdate_git_poller, docs_git_poller, ngq_git_poller]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="makengq",
                            change_filter=util.ChangeFilter(project = 'ngq'),
                            treeStableTimer=None,
                            builderNames=["makengq"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="makedocs",
                            change_filter=util.ChangeFilter(project = 'docs'),
                            treeStableTimer=None,
                            builderNames=["makedocs"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="selfupdate",
                            change_filter=util.ChangeFilter(project = 'selfupdate'),
                            treeStableTimer=None,
                            builderNames=["selfupdate"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["selfupdate", "makedocs", "makengq"],
                            properties=[
                                util.StringParameter(
                                    name="tets",
                                    label="tets parameter:<br>",
                                    default="default value", size=80)
                            ]
))
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

#### self update
selfupdate_factory = util.BuildFactory()
selfupdate_factory.addStep(steps.Git(repourl=selfupdate_repourl,  mode='incremental'))
selfupdate_factory.addStep(FileUpload(slavesrc="master.cfg", masterdest="/home/bishop/buildbot/master/master.cfg", mode=0644))
selfupdate_factory.addStep(MasterShellCommand(name="reconfig", description=["reconfig", "buildbot"],
                                 descriptionDone=["reconfig", "buildbot"], haltOnFailure=True,
                                 command=["buildbot", "reconfig", "/home/bishop/buildbot/master"]))
                                 
selfupdate_builder = BuilderConfig(name = 'selfupdate', slavenames = ['build-nix'], factory = selfupdate_factory)     
                            
#### build docs

makedocs_factory = util.BuildFactory()
# 1. check out the source
makedocs_factory.addStep(steps.Git(repourl=docs_repourl, mode='incremental', submodules=True)) #mode='full', method='clobber'

# 2. build pdf for each doc except dev
makedocs_factory.addStep(steps.ShellCommand(command=["sh", "make_javadoc.sh"], 
                                            description=["make", "javadoc for mobile (android)"],
                                            descriptionDone=["made", "javadoc for mobile (android)"], 
                                            workdir="build/source/ngmobile_dev"))
makedocs_factory.addStep(steps.ShellCommand(command=["make", "latexpdf"], 
                                            description=["make", "pdf for NextGIS Mobile"],
                                            workdir="build/source/docs_ngmobile"))
makedocs_factory.addStep(steps.ShellCommand(command=["make", "latexpdf"], 
                                            description=["make", "pdf for NextGIS Web"],
                                            workdir="build/source/docs_ngweb"))
makedocs_factory.addStep(steps.ShellCommand(command=["make", "latexpdf"], 
                                            description=["make", "pdf for NextGIS Manager"],
                                            workdir="build/source/docs_ngmanager"))
makedocs_factory.addStep(steps.ShellCommand(command=["make", "latexpdf"], 
                                            description=["make", "pdf for NextGIS FormBuilder"],
                                            workdir="build/source/docs_formbuilder"))

# 3. build html
makedocs_factory.addStep(Sphinx(sphinx_builddir="_build/html",sphinx_sourcedir="source",sphinx_builder="html"))
makedocs_factory.addStep(DirectoryUpload(slavesrc="_build/html", masterdest="/usr/share/nginx/doc"))
makedocs_factory.addStep(MasterShellCommand(name="chmod", description=["fixing", "permissions"],
                                 descriptionDone=["fix", "permissions"], haltOnFailure=True,
                                 command=["/bin/bash", "-c", "chmod -R 0755 /usr/share/nginx/doc/"]))

ftp_upload_command = "find . -type f -exec curl -u " + bbconf.ftp_user + " --ftp-create-dirs -T {} ftp://nextgis.ru/{} \;"

# 4. upload to ftp
makedocs_factory.addStep(MasterShellCommand(name="upload to ftp", description=["upload", "docs directory to ftp"],
                                 descriptionDone=["upload", "docs directory to ftp"], haltOnFailure=True,
                                 command = ftp_upload_command,
                                 path="/usr/share/nginx/doc"))

makedocs_builder = BuilderConfig(name = 'makedocs', slavenames = ['build-nix'], factory = makedocs_factory)

c['builders'] = [selfupdate_builder, makedocs_builder]

#### build ngq installer
make_ngq_installer_factory = util.BuildFactory()
'''
    IN SLAVE MUST BE SET ENV VARIABELS:
        OSGEO4W_ROOT - path to OSGeo4W, forexample: E:\builds\env\osgeo4w
        MICROSOFT_SDK - path to ms SDK (7.0 or 7.1), forexample: %PROGRAMFILES%\Microsoft SDKs\Windows\v7.0
        GDAL_2_0 - path to GDAL, forexample: E:\builds\env\gdal-2.0.0dev
    PATH must include: cmake, git, flex, bison 
'''
env_vars = {
    "LIB": ["${LIB}", "${OSGEO4W_ROOT}\\lib", "${OSGEO4W_ROOT}\\apps\\Python27\\libs", "${MICROSOFT_SDK}\\lib", "${GDAL_2_0}\\lib"],
    "INCLUDE": ["${INCLUDE}", "${OSGEO4W_ROOT}\\include", "${GDAL_2_0}\\include" ],
    "PATH": ["${PATH}", "${OSGEO4W_ROOT}\\bin", "${OSGEO4W_ROOT}\\apps\\Python27\\Scripts"],
    "PYTHONHOME": ["${OSGEO4W_ROOT}\\apps\\Python27"],
    "QT_PLUGIN_PATH": ["${OSGEO4W_ROOT}\\apps\\Qt4\\plugins"],
    "QT_RASTER_CLIP_LIMIT": ["4096"]
}
make_ngq_installer_factory.addStep(steps.SetPropertiesFromEnv(variables=["OSGEO4W_ROOT"]))

# 1. check out the source
make_ngq_installer_factory.addStep(Git(repourl=ngq_repourl, branch=ngq_branch_for_everyday, mode='incremental', workdir=ngq_src_dir_name, timeout=1800))
# 2. patching
# 3. configuration
make_ngq_installer_factory.addStep( steps.RemoveDirectory(name = 'clean prev build', dir = ".\\ngq-build") )

cmake_options = [
"-D", "PEDANTIC=TRUE",
"-D", "WITH_QSPATIALITE=TRUE",
"-D", "WITH_MAPSERVER=TRUE",
"-D", "MAPSERVER_SKIP_ECW=TRUE",
"-D", "WITH_GLOBE=TRUE",
"-D", "WITH_TOUCH=TRUE",
"-D", "WITH_ORACLE=TRUE",
"-D", "CMAKE_BUILD_TYPE=Release",
"-D", "CMAKE_INSTALL_PREFIX=..\\ngq-install",
"..\\"+ngq_src_dir_name
]

make_ngq_installer_factory.addStep( 
    steps.ShellCommand(
        name = 'cmake configuration',
        command = ["cmake.exe", "-G", "Visual Studio 9 2008", "-D", util.Interpolate("PYTHON_EXECUTABLE=%(prop:OSGEO4W_ROOT)s\\bin\\python.exe")] + cmake_options,
        workdir=".\\ngq-build",
        env = env_vars
    )
)
# 4. build
#make_ngq_installer_factory.addStep(steps.ShellCommand(name = 'build ngq', command=["call", "makengq.bat", ngq_src_dir_name, WithProperties('%(buildnumber)s')], workdir="./"))
make_ngq_installer_factory.addStep(steps.ShellCommand(name = 'build ngq', command=["call", "ngq-build.bat", "qgis2.8.1.sln"], workdir=".\\ngq-build"))
'''
make_ngq_installer_factory.addStep( 
    steps.VS2008(
        name = 'build ngq',
        projectfile="qgis2.8.1.sln",
        config="release",
        useenv=True,
        installdir="C:\\Program Files (x86)\\Microsoft Visual Studio 9.0",
        arch="x32",
        mode="build",
        workdir=".\\ngq-build",
        env = env_vars
    )
)
'''
# 5. make installer
# 6. upload to ftp
ftp_server = 'nextgis.ru'
ftp_conn_string = 'ftp://%s@%s'%(bbconf.ftp_upldsoft_user, ftp_server)
'''
make_ngq_installer_factory.addStep(steps.ShellCommand(name = 'upload installer to ftp(%s)'%ftp_server, command=[
    "call", "ftp_put_installer.bat", 
    ftp_conn_string, 
    '%s/%s'%(ngq_src_dir_name, '.meta-ngq'), 
    'qgis/ngq-builds'], workdir="./"))

make_ngq_installer_factory.addStep(steps.ShellCommand(name = 'upload meta-file to ftp(%s)'%ftp_server, command=[
    "call", "ftp_put_metafile.bat", 
    ftp_conn_string, 
    '%s/%s'%(ngq_src_dir_name, '.meta-ngq'), 
    'qgis/.meta-ngq-test'], workdir="./"))
''' 
make_ngq_installer_builder = BuilderConfig(name = 'makengq', slavenames = ['build-win7'], factory = make_ngq_installer_factory)
c['builders'].append(make_ngq_installer_builder)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth(bbconf.buildbot_gui_users),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',      # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = True,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    showUsersPage = 'auth',
)
c['status'].append(html.WebStatus(http_port='tcp:8080:interface=192.168.250.1', authz=authz_cfg))

####### E-mail notification

from buildbot.interfaces import IEmailLookup
from zope.interface import implements
import re

class EmailLookup(object):
    implements(IEmailLookup)
    def getAddress(user):
        r = re.compile('[<>]+')
        components = r.split(user)
        if len(components) > 2:
            return components[1]
        else:
            return user

email_lookup = EmailLookup()

mn = MailNotifier(fromaddr=bbconf.email_user,
                       sendToInterestedUsers=True,
                       lookup = email_lookup,
                       mode='warnings',
                       extraRecipients=bbconf.email_recipients,
                       relayhost="smtp.gmail.com", 
                       useTls=True, 
                       smtpPort=587,
                       smtpUser=bbconf.email_user, 
                       smtpPassword=bbconf.email_passwd)
c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NextGIS"
c['titleURL'] = "http://nextgis.ru"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = bbconf.buildbot_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
