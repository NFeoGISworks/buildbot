# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.steps.source.git import Git
from buildbot.steps.python import Sphinx
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import DirectoryUpload
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic  import SingleBranchScheduler
from buildbot.config import BuilderConfig
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import WithProperties

from twisted.python import log

import importlib
import bbconf
from ldapauth import LdapAuth
import os.path

scenarios_and_dependences = []


def addScenario(c, name):
    scenario = importlib.import_module(name)
    reload(scenario)

    for key, value in scenario.c.items():
        log.msg("Add scenario. Append '{}':{}".format(
            key,
            [item.name for item in value])
        )

        c[key].extend(value)

    scenarios_and_dependences.append(name + ".py")
    if hasattr(scenario, 'dependent_local_modules'):
        scenarios_and_dependences.extend(scenario.dependent_local_modules)

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

selfupdate_repourl = 'git://github.com/nextgis/buildbot.git'

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
    buildslave.BuildSlave("build-nix", bbconf.slave_passwd),
    buildslave.BuildSlave("build-ngq-win7", bbconf.slave_passwd)]

#TODO: add slaves Windows, MacOS, etc?

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

scenarios = ['makedocs', 'makengmob', 'makengq']

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 

selfupdate_git_poller = GitPoller(project = 'selfupdate',
                       repourl = selfupdate_repourl,
                       workdir = 'selfupdate-workdir',
                       branch = 'master',
                       pollinterval = 600,)         
                       
c['change_source'] = [selfupdate_git_poller]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  

c['schedulers'] = []

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="selfupdate",
                            change_filter=util.ChangeFilter(project = 'selfupdate'),
                            treeStableTimer=2*60,
                            builderNames=["selfupdate"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["selfupdate"],
))

### Add scenarios
for scenario in scenarios:
    if os.path.isfile(scenario + ".py"):
        addScenario(c, scenario)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

#### self update
selfupdate_factory = util.BuildFactory()
selfupdate_factory.addStep(steps.Git(repourl=selfupdate_repourl, mode='incremental'))
selfupdate_factory.addStep(FileUpload(slavesrc="master.cfg", masterdest="/home/bishop/buildbot/master/master.cfg", mode=0644))

for filename in scenarios_and_dependences:
    selfupdate_factory.addStep(
        FileUpload(
            slavesrc=filename,
            masterdest="/home/bishop/buildbot/master/"+filename,
            mode=0644
        )
    )

selfupdate_factory.addStep(MasterShellCommand(name="reconfig", description=["reconfig", "buildbot"],
                                 descriptionDone=["reconfig", "buildbot"], haltOnFailure=True,
                                 command=["/home/bishop/buildbot/sandbox/bin/buildbot", "reconfig", "/home/bishop/buildbot/master"]))
                                 
selfupdate_builder = BuilderConfig(name = 'selfupdate', slavenames = ['build-nix'], factory = selfupdate_factory)     


c['builders'].append(selfupdate_builder)

# builderNames = [builder.name for builder in c['builders']]
# c['schedulers'].append(schedulers.ForceScheduler(
#                             name="force",
#                             builderNames=builderNames,
# ))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.
from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=LdapAuth('ldap://192.168.250.1', 'dc=nextgis,dc=com', 'buildbot'),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',      # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = True,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    showUsersPage = 'auth',
)
c['status'].append(html.WebStatus(http_port='tcp:8080:interface=192.168.250.1', authz=authz_cfg))

####### E-mail notification

# from buildbot.interfaces import IEmailLookup
# from zope.interface import implements
# from buildbot.status.mail import MailNotifier
# import re
#
#class EmailLookup(object):
#    implements(IEmailLookup)
#    def getAddress(user):
#        r = re.compile('[<>]+')
#        components = r.split(user)
#        if len(components) > 2:
#            return components[1]
#        else:
#            return user
#
# email_lookup = EmailLookup()
#
# mn = MailNotifier(fromaddr=bbconf.email_user,
#                       sendToInterestedUsers=True,
#                       lookup = email_lookup,
#                       mode='warnings',
#                       extraRecipients=bbconf.email_recipients,
#                       relayhost="smtp.gmail.com", 
#                       useTls=True, 
#                       smtpPort=587,
#                       smtpUser=bbconf.email_user, 
#                       smtpPassword=bbconf.email_passwd)
#c['status'].append(mn)

#makengq_release_mnotifier = MailNotifier(
#    fromaddr=bbconf.email_user,
#    extraRecipients=["alexander.lisovenko@gmail.com"],
#    sendToInterestedUsers=False,
#    mode=("failing", "passing", "warnings", "exception"),
#    builders=["makengq", "makengq-release"],
#    relayhost="smtp.gmail.com", 
#    useTls=True, 
#    smtpPort=587,
#    smtpUser=bbconf.email_user, 
#    smtpPassword=bbconf.email_passwd
#)
#c['status'].append(makengq_release_mnotifier)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NextGIS"
c['titleURL'] = "http://nextgis.ru"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = bbconf.buildbot_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
